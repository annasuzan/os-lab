print("int15");
alias processTable R5;
processTable = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16;

alias userSP R11;
userSP = SP;

alias returnVal R9;
returnVal = [PTBR + 2 * ((userSP - 1) / 512)] * 512 + ((userSP - 1) % 512);

[processTable + 13] = SP;
SP = [processTable + 11] * 512 - 1;

[processTable + 9] = 21;

if([processTable + 1] != 2 || [processTable + 3] != 1) then 	// shell is now 2..for the previous stages it was part of init so it was 1
	[returnVal] = -1;
	//print(-1);
	[processTable + 9] = 0;
	SP = [processTable + 13];
	ireturn;
endif;

print("befKILL");
multipush(R5,R9,R11);
R1 = 5;			//KILL_ALL
R2 = [SYSTEM_STATUS_TABLE + 1];
call MOD_1;		//PROCESS MANAGER MODULE
multipop(R5,R9,R11);

alias i R10;
i = 0;
while(i < 4) do	
	//print(i);
	if([BUFFER_TABLE + i * 4 + 1] == 1) then	//if DIRTY
		multipush(R5,R9,R10,R11);
		R1 = 1;					//DISK_STORE
		R2 = [SYSTEM_STATUS_TABLE + 1];
		R3 = (71 + i);			//PAGE NUM
		R4 = [BUFFER_TABLE + i * 4];	//DISK BLOCK
		call MOD_4;				//DEVICE MANAGER MODULE
		multipop(R5,R9,R10,R11);
		[BUFFER_TABLE + i * 4 + 1] = 0;
	endif;
	i = i + 1;
endwhile;

//print("AFB");		

//INODE + USER TABLE

multipush(R5,R9,R11);
R1 = 1;		//DISK LOAD
R2 = [processTable + 1];
R3 = 59; 	//PAGE 
R4 = 3; 	//BLOCK
call MOD_4;	//DEVICE MANAGER
multipop(R5,R9,R11);

multipush(R5,R9,R11);
R1 = 1;		//DISK LOAD
R2 = [processTable + 1];
R3 = 60; 	//PAGE 
R4 = 4; 	//BLOCK
call MOD_4;	//DEVICE MANAGER
multipop(R5,R9,R11);

// ROOT FILE
multipush(R5,R9,R11);
R1 = 1;		//DISK LOAD
R2 = [processTable + 1];
R3 = 62; 	//PAGE 
R4 = 5; 	//BLOCK
call MOD_4;	//DEVICE MANAGER
multipop(R5,R9,R11);

//DISK FREE LIST
multipush(R5,R9,R11);
R1 = 1;		//DISK LOAD
R2 = [processTable + 1];
R3 = 61; 	//PAGE 
R4 = 2; 	//BLOCK
call MOD_4;	//DEVICE MANAGER
multipop(R5,R9,R11);

halt;
	
	
