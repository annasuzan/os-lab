//print "int7";
alias processTable R5;
processTable = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16;

alias userSP R6;
userSP = SP;

[processTable + 13] = SP;
SP = [processTable + 11] * 512 - 1;
[processTable + 9] = 5;

alias returnVal R7;
returnVal = [PTBR + 2 * ((userSP - 1) / 512)] * 512 + ((userSP - 1) % 512);

alias perPT R8;
perPT = [processTable + 11] * 512 + RESOURCE_TABLE_OFFSET;

alias inodeEntry R9;

alias i R10;

alias openFileEntry R11;

alias fileDesc R12;
fileDesc = [[PTBR + 2 * ((userSP - 4) / 512)] * 512 + ((userSP - 4) % 512)];

alias word R13;
word = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];

//print(word);
//print(fileDesc);
if(fileDesc == -2) then
	multipush(R5,R6,R7);
	R1 = 3;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = word;
	call MOD_4;
	multipop(R5,R6,R7);
else
	//print("else");
	if(fileDesc < 0 || fileDesc > 7) then
		//print(-7);
		[returnVal] = -1;		//-1
		[processTable + 9] = 0;
		SP = [processTable + 13];
		ireturn;
	endif;
	if([perPT + fileDesc * 2] != FILE) then
		[returnVal] = -1;		//-1
		[processTable + 9] = 0;
		SP = [processTable + 13];
		ireturn;
	endif;
	openFileEntry = [perPT + fileDesc * 2 + 1];
	inodeEntry = [OPEN_FILE_TABLE + openFileEntry * 4];

	//current user not root AND current user does not own the file AND exclusive permission set -- yet to do
	if(([processTable + 3] != 1) && ([processTable + 3] != [INODE_TABLE + inodeEntry * 16 + 3]) && ([INODE_TABLE + inodeEntry * 16 + 4] == 0)) then
		[returnVal] = -3;
		[processTable + 9] = 0;
		SP = [processTable + 13];
		ireturn;
	endif;
	
	//print("gtacquire");
	multipush(R5,R6,R7,R8,R9,R10,R11,R12,R13);
	R1 = 4;		//ACQUIRE INODE
	R2 = inodeEntry;
	R3 = [SYSTEM_STATUS_TABLE + 1];
	call MOD_0;	//RESOURCE TABLE
	multipop(R5,R6,R7,R8,R9,R10,R11,R12,R13);

	if(R0 == -1) then
		[returnVal] = -1;		//-1
		[processTable + 9] = 0;
		SP = [processTable + 13];
		ireturn;
	endif;
	
	alias Lseek R3;
	alias memBuffer R4;

	Lseek = OPEN_FILE_TABLE + openFileEntry * 4 + 2;
	
	//print([Lseek]);
	if([Lseek] >= MAX_FILE_SIZE) then
		multipush(R5,R6,R7);
		R1 = 5;		//RELEASE INODE
		R2 = inodeEntry;
		R3 = [SYSTEM_STATUS_TABLE + 1];
		call MOD_0;	//RESOURCE TABLE
		multipop(R5,R6,R7);
		[returnVal] = -2;		//-2
		[processTable + 9] = 0;
		SP = [processTable + 13];
		ireturn;
	endif;
	
	if(([Lseek] % 512 == 0) && ([Lseek] == [INODE_TABLE + inodeEntry * 16 + 2])) then
		multipush(R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13);
		R1 = 3;
		call MOD_2;
		multipop(R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13);
		if(R0 == -1) then
			multipush(R5,R6,R7);
			R1 = 5;		//RELEASE INODE
			R2 = inodeEntry;
			R3 = [SYSTEM_STATUS_TABLE + 1];
			call MOD_0;	//RESOURCE TABLE
			multipop(R5,R6,R7);
			[returnVal] = -2;		//-2
			[processTable + 9] = 0;
			SP = [processTable + 13];
			ireturn;
		endif;
		[INODE_TABLE + inodeEntry * 16 + 8 + ([Lseek] / 512)] = R0;
	endif;
	//print("befbuff");
	multipush(R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13);
	R1 = 1;		//BUFFERED_WRITE
	R2 = [INODE_TABLE + inodeEntry * 16 + 8 + ([Lseek] / 512)];  //diskBlock
	R3 = [Lseek] % 512; //offset 
	R4 = word;
	call MOD_3;	//FILE MANAGER MODULE
	multipop(R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13);

	if([Lseek] == [INODE_TABLE + inodeEntry * 16 + 2]) then
		 [INODE_TABLE + inodeEntry * 16 + 2] =  [INODE_TABLE + inodeEntry * 16 + 2] + 1;
		 [ROOT_FILE + inodeEntry * 8 + 1] = [ROOT_FILE + inodeEntry * 8 + 1] + 1;
	endif;
	
	[Lseek] = [Lseek] + 1;

	multipush(R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13);
	R1 = 5;		//RELEASE INODE
	R2 = inodeEntry;
	R3 = [SYSTEM_STATUS_TABLE + 1];
	call MOD_0;	//RESOURCE TABLE
	multipop(R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13);
	

endif;

[returnVal] = 0;
[processTable + 9] = 0;
SP = [processTable + 13];
//print "ret7";
ireturn;
 
