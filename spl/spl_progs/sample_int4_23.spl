//print("int4");
alias processTable R5;
processTable = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16;

alias userSP R11;
userSP = SP;

[processTable + 13] = SP;
SP = [processTable + 11] * 512 - 1;

alias syscallNo R12;
syscallNo = [[PTBR + 2 * ((userSP - 5) / 512)] * 512 + ((userSP - 5) % 512)];

alias fileName R13;
fileName = [[PTBR + 2 * ((userSP - 4) / 512)] * 512 + ((userSP - 4) % 512)];

alias permission R8;
permission = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];

alias returnVal R9;
returnVal = [PTBR + 2 * ((userSP - 1) / 512)] * 512 + ((userSP - 1) % 512);

alias inodeFreeEntry R7;

alias i R10;

//CREATE SYSTEM CALL
if(syscallNo == 1) then
	[processTable + 9] = 1;
	
	//CHECKING IF THE FILE EXISTS
	i = 0;
	while(i<MAX_FILE_NUM) do
		if([INODE_TABLE + i * 16 + 1] == fileName) then
			[returnVal] = 0;
			[processTable + 9] = 0;
			SP = [processTable + 13];
			ireturn;
		endif;
		i = i + 1;
	endwhile;
	
	//CHECKING FOR A FREE INODE TABLE ENTRY

	inodeFreeEntry = -1;
	i = 0;
	while(i<MAX_FILE_NUM) do
		if([INODE_TABLE + i * 16 + 1] == -1) then
			inodeFreeEntry = i;
			break;
		endif;
		i = i + 1;
	endwhile;
	if(inodeFreeEntry == -1) then
		[returnVal] = -1;
		[processTable + 9] = 0;
		SP = [processTable + 13];
		ireturn;
	endif;
	
	alias inodeTable R6;
	inodeTable = INODE_TABLE + inodeFreeEntry * 16;

	[inodeTable + 1] = fileName;
	[inodeTable + 2] = 0;
	[inodeTable + 0] = DATA;
	[inodeTable + 8] = -1;
	[inodeTable + 9] = -1;
	[inodeTable + 10] = -1;
	[inodeTable + 11] = -1;
	[inodeTable + 3] = [processTable + 3];
	[inodeTable + 4] = permission;

	alias rootFile R6;
	rootFile = ROOT_FILE + inodeFreeEntry * 8;

	[rootFile + 0] = fileName;
	[rootFile + 1] = 0;
	[rootFile + 2] = DATA;
	[rootFile + 3] = [USER_TABLE + [processTable + 3] * 2];
	[rootFile + 4] = permission;

	[returnVal] = 0;
	//[processTable + 9] = 0;
	//SP = [processTable + 13];
	//ireturn;
	
endif;

//DELETE SYSTEM CALL
if(syscallNo == 4) then
	//print(syscallNo);
	[processTable + 9] = 4;
	i = 0;
	inodeFreeEntry = -1;
	while(i<MAX_FILE_NUM) do
		if([INODE_TABLE + i * 16 + 1] == fileName) then
			inodeFreeEntry = i;
			break;
		endif;
		i = i + 1;
	endwhile;
	
	alias inodeTable R4;
	inodeTable = INODE_TABLE + inodeFreeEntry * 16;
	//print("i");
	//print([inodeTable + 1]);

	[returnVal] = 2;

	if(inodeFreeEntry == -1) then
		[returnVal] = 0;	//0
		[processTable + 9] = 0;
		SP = [processTable + 13];
		ireturn;
	endif;
	
	if([inodeTable + 0] != DATA) then
		[returnVal] = -1;
		//[processTable + 9] = 0;
		//SP = [processTable + 13];
		//ireturn;
	endif;
	if([inodeTable + 4] == 0) then
		if([processTable + 3] != 1 && [processTable + 3] != [inodeTable + 3]) then	//CHECK THIS
			[returnVal] = -1;	//-1
			//[processTable + 9] = 0;
			//SP = [processTable + 13];
			//ireturn;
		endif;
	endif;

	if([returnVal] == 5 || [returnVal] == -1) then	//make 5 to 0
		[processTable + 9] = 0;
		SP = [processTable + 13];
		ireturn;
	endif;
	
	multipush(R4,R5,R6,R7,R8,R9,R10,R11,R12,R13);
	R1 = 4;					//ACQUIRE_INODE
	R2 = inodeFreeEntry;
	R3 = [SYSTEM_STATUS_TABLE + 1];
	call MOD_0;				//RESOURCE MANAGER MODULE
	multipop(R4,R5,R6,R7,R8,R9,R10,R11,R12,R13);
	
	if([FILE_STATUS_TABLE + inodeFreeEntry * 4 + 1] != -1) then
		//multipush(R5,R6,R7,R8,R9,R10,R11,R12,R13);
		multipush(R5,R9);
		R1 = 5;				//RELEASE_INODE
		R2 = inodeFreeEntry;
		R3 = [SYSTEM_STATUS_TABLE + 1];
		call MOD_0;			//RESOURCE MANAGER MODULE
		multipop(R5,R9);
		//multipop(R5,R6,R7,R8,R9,R10,R11,R12,R13);
		[returnVal] = -2;
		[processTable + 9] = 0;
		SP = [processTable + 13];
		ireturn;
	endif;
	i = 0;
	while(i < 4) do
		if([inodeTable + 8 + i] != -1) then
			alias bufferNum R14; 
			bufferNum = [inodeTable+ 8 + i] % MAX_BUFFER;
			if(([BUFFER_TABLE + bufferNum * 4 + 0] == [inodeTable + 8 + i]) && ([BUFFER_TABLE + bufferNum * 4 + 1] == 1)) then
				[BUFFER_TABLE + bufferNum * 4 + 1] = 0;
				multipush(R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14);
				R1 = 4;						//RELEASE_BLOCK
				R2 = [inodeTable + 8 + i];
				R3 = [SYSTEM_STATUS_TABLE + 1];
				call MOD_2;					//MEMORY MANAGER MODULE
				multipush(R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14);
			endif;		
		endif;
		i = i + 1;
	endwhile;

	i = 0;
	//print("i");
	//print ([inodeTable + 1]);
	while(i<16) do
		if(i<8) then
			[inodeTable + i] = -1;
			[ROOT_FILE + inodeFreeEntry * 8 + i] = -1;
		else
			[inodeTable + i] = -1;
		endif;
		i = i + 1;
	endwhile;
	
	//multipush(R4,R5,R6,R7,R8,R9,R10,R11,R12,R13);
	multipush(R5,R9);
	R1 = 5;				//RELEASE_INODE
	R2 = inodeFreeEntry;
	R3 = [SYSTEM_STATUS_TABLE + 1];
	call MOD_0;			//RESOURCE MANAGER MODULE
	multipop(R5,R9);
	//multipop(R4,R5,R6,R7,R8,R9,R10,R11,R12,R13);
		
	[returnVal] = 0;
	//[processTable + 9] = 0;
	//SP = [processTable + 13];
	//ireturn;

endif;

[processTable + 9] = 0;
SP = [processTable + 13];
ireturn;









