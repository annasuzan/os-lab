//print("excep");
breakpoint;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = -1;

alias userSP R7;
userSP = SP;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;


SP =([PROCESS_TABLE +([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512) - 1;

backup;

multipush(EIP);

if(EC != 0) then    //(userSP == (PTLR * 512 - 1)
	//print"ECn0";
	//print EC;
	if(EC == 1) then
		print("EC1");  //Illegal instruction
	endif;
	
	if(EC == 2) then
		print("EC2");	//Illegal memory access
		//print("EMA");
		//print EMA;
		
	endif;

	if(EC == 3) then
		print("EC3"); //Arithmetic exception
	endif;

	//multipush(EIP,EC,EPN,EMA);
	R1 = 3; 			//EXIT_PROCESS
	R2 = [SYSTEM_STATUS_TABLE + 1];
	call MOD_1; 			//process manager module
	//multipop(EIP,EC,EPN,EMA);
	//print("rPiE");
	
	//breakpoint;
	//multipush(EIP,EC,EPN,EMA);
	call MOD_5; 			
	//multipop(EIP,EC,EPN,EMA);
	//print("rSiE");
	
else
	alias diskBlock R5;
	alias currPID R4;
	alias offsetDMT R3;
	//PTBR = PAGE_TABLE + currPID * 20;
	currPID = [SYSTEM_STATUS_TABLE + 1]; 
	if(EC == 0) then
		//print"EC0";
		//print EC;
		
		if((EPN >= 4) && (EPN <= 7)) then
  
			//print("EPN");
			//print EPN;

			diskBlock = [DISK_MAP_TABLE + currPID * 10 + EPN];
		
			multipush(R3,R4,R5);
			R1 = 5;    //GET_CODE_PAGE
			R2 = diskBlock;
			call MOD_2;
			multipop(R3,R4,R5);
			[PTBR + EPN * 2 + 0] = R0;	
			[PTBR + EPN * 2 + 1] = "1100";
			//print("end4567");
		endif;
		
		if((EPN>=2) && (EPN<=3)) then

			//print("EPN");
			//print EPN;

			//print("insidee2");
			multipush(R3,R4,R5);
			R1 = 1;		//GET_FREE_PAGE
			call MOD_2;
			multipop(R3,R4,R5);
			[PTBR + 2 * EPN + 0] = R0;
			[PTBR + 2 * EPN + 1] = "1110";

			multipush(R3,R4,R5);
			R1 = 1;		//GET_FREE_PAGE
			call MOD_2;
			multipop(R3,R4,R5);
			[PTBR + 2 * EPN + 2] = R0;
			[PTBR + 2 * EPN + 3] = "1110";
			//print("end23");
		endif;
	endif;
endif;

multipop(EIP);

restore;

SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

SP = SP + 1;


[([PTBR + 2 * (SP / 512)] * 512) + (SP % 512)] = EIP;

//print("reexcep");
//breakpoint;
ireturn; 


