//print "st";
//breakpoint;  //part of stage 13 assg2

//saving current stack pointer in the user stack pointer pos which the 13th pos of an entry
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;  

//loading the user page area from the 11th pos in the entry to the stack pointer
SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1; 

//backing up registers
backup;

//finding new PID
alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE+1];

//finding current process entry
alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;

//setting currrent process status to 'ready'
[process_table_entry + 4] = READY;

//increment TICK field of each process
alias i R5;
i = 0;
while(i<MAX_PROC_NUM) do
	if([PROCESS_TABLE + i*16 + 4] != TERMINATED) then
		[PROCESS_TABLE + i*16 + 0] = [PROCESS_TABLE + i*16 + 0] + 1;
	endif;
	i = i + 1;
endwhile;	

//print "currentPID before sm-";
//print currentPID;	

//invoke context switch module
call MOD_5;

//print "currentPID after sm-";
//print [SYSTEM_STATUS_TABLE + 1];

restore;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
  
ireturn;

