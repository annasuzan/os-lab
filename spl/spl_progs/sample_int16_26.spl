//print("int16");

alias processTable R5;
processTable = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16;

alias userSP R6;
userSP = SP;

[processTable + 13] = SP;
SP = [processTable + 11] * 512 - 1;

alias returnVal R7;
returnVal = [PTBR + 2 * ((userSP - 1) / 512)] * 512 + ((userSP - 1) % 512);

alias userName R12;
userName = [[PTBR + 2 * ((userSP - 4) / 512)] * 512 + ((userSP - 4) % 512)];

alias password R13;
password = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];

alias syscallNo R14;
syscallNo = [[PTBR + 2 * ((userSP - 5) / 512)] * 512 + ((userSP - 5) % 512)];

alias i R10;
alias userID R11;

//print(syscallNo);
//NEWUSR
if(syscallNo == 22) then
	[processTable + 9] = 22;
	print([processTable + 3]);
	print([processTable + 1]);
	if([processTable + 3] != 1 || [processTable + 1] != 2) then
		[returnVal] = -2;
		[processTable + 9] = 0;
		SP = [processTable + 13];
		ireturn;
	endif;
	
	i = 0;
	userID = -1;
	while(i < 16) do
		if([USER_TABLE + 2 * i] == userName) then
			[returnVal] = -1;
			[processTable + 9] = 0;
			SP = [processTable + 13];
			ireturn;
		endif;
		if([USER_TABLE + 2 * i] == -1) then
			if(userID == -1) then
				userID = i;
			endif;
		endif;
		i = i + 1;
	endwhile;
	
	if(userID == -1) then
		[returnVal] = -3;
		[processTable + 9] = 0;
		SP = [processTable + 13];
		ireturn;
	endif;
	encrypt password;
	[USER_TABLE + 2 * userID] = userName;
	[USER_TABLE + 2 * userID + 1] = password;
	[processTable + 9] = 0;
	[returnVal] = 0;
	SP = [processTable + 13];
	ireturn;
endif;

//REMUSR
if(syscallNo == 23) then
	[processTable + 9] = 23;
	if([processTable + 3] != 1 || [processTable + 1] != 2) then
		[returnVal] = -2;
		[processTable + 9] = 0;
		SP = [processTable + 13];
		ireturn;
	endif;
	
	if(userName == "root" || userName == "kernel") then
		[returnVal] = -2;
		[processTable + 9] = 0;
		SP = [processTable + 13];
		ireturn;
	endif;

	i = 0;
	userID = -1;
	while(i < 16) do
		if([USER_TABLE + 2 * i] == userName) then
			userID = i;
			break;
		endif;
		i = i + 1;
	endwhile;
	
	if(userID == -1) then
		[returnVal] = -1;
		[processTable + 9] = 0;
		SP = [processTable + 13];
		ireturn;
	endif;
	
	i = 0;
	while(i<MAX_FILE_NUM) do
		if([ROOT_FILE + i * 8 + 3] == userName) then
			[returnVal] = -3;
			[processTable + 9] = 0;
			SP = [processTable + 13];
			ireturn;
		endif;
		i = i + 1;
	endwhile;

	[USER_TABLE + 2 * userID] = -1;
	[USER_TABLE + 2 * userID + 1] = -1;

	[processTable + 9] = 0;
	[returnVal] = 0;
	SP = [processTable + 13];
	ireturn;
endif;

//SETPWD
if(syscallNo == 24) then
	[processTable + 9] = 24;
	if([processTable + 1] != 2) then
		[returnVal] = -1;
		[processTable + 9] = 0;
		SP = [processTable + 13];
		ireturn;
	endif;

	i = 0;
	userID = -1;
	while(i < 16) do
		if([USER_TABLE + 2 * i] == userName) then
			userID = i;
			break;
		endif;
		i = i + 1;
	endwhile;
	
	if(userID == -1) then
		[returnVal] = -1;
		[processTable + 9] = 0;
		SP = [processTable + 13];
		ireturn;
	endif;
	
	if(userID != [processTable + 3]) then
		if(userID != 1) then
			[returnVal] = -1;
			[processTable + 9] = 0;
			SP = [processTable + 13];
			ireturn;
		endif;
	endif; 
	
	encrypt password;
	[USER_TABLE + 2 * userID + 1] = password;

	[processTable + 9] = 0;
	[returnVal] = 0;
	SP = [processTable + 13];
	ireturn;
endif;

//GETUID
if(syscallNo == 26) then
	[processTable + 9] = 26;
	i = 0;
	userID = -1;
	while(i < 16) do
		if([USER_TABLE + 2 * i] == userName) then
			userID = i;
			break;
		endif;
		i = i + 1;
	endwhile;
	
	if(userID == -1) then
		[returnVal] = -1;
	else
		[returnVal] = userID;
	endif;
	[processTable + 9] = 0;
	SP = [processTable + 13];
	ireturn;
endif;

//GETUNAME
if(syscallNo == 25) then
	[processTable + 9] = 25;
	alias userID R12;

	if(userID < 0 || userID > 7) then
		[returnVal] = -1;
		[processTable + 9] = 0;
		SP = [processTable + 13];
		ireturn;
	endif;
	if([USER_TABLE + 2 * userID] == -1) then
		[returnVal] = -1;
		[processTable + 9] = 0;
		SP = [processTable + 13];
		ireturn;
	endif;
	[returnVal] = [USER_TABLE + 2 * userID];
	[processTable + 9] = 0;
	SP = [processTable + 13];
	ireturn;
endif;












