print("fork");
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 8;

alias userSP R11;
userSP = SP;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP; 	//ch

SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1;

multipush(R11);
R1 = 1;		 //R1 - get pcb entry, R0 has the child pid 
call MOD_1;	 //process module
multipop(R11);

//PTBR = PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1] * 20;

alias childPID R5;
childPID = R0;
print(childPID);

alias i R10;
if(childPID == -1) then
	print("not valid PID");
	alias physicalAddrRetVal R5;
	physicalAddrRetVal = ([PTBR + 2*((userSP - 1)/512)] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal] = -1;
else
	print("valid PID");
	//print childPID;
	//set heap pages for parent if not already set
	i = 0;
	//print("heappagesP");
	while(i<2) do
		if([PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1] * 20 + 4 + 2*i] == -1) then
			multipush(R5,R10,R11);
			R1 = 1;
			call MOD_2;
			multipop(R5,R10,R11);
			[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1] * 20 + 4 + 2*i] = R0;
			[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1] * 20 + 5 + 2*i] = "1110";
		endif;
		i = i + 1;
	endwhile;

	//set stack pages for child process
	//print("stackpagesC");
	i = 16;
	while(i<20) do		//stack pages 
		multipush(R5,R10,R11);
		R1 = 1;
		call MOD_2;
		multipop(R5,R10,R11);
		[PAGE_TABLE_BASE + childPID * 20 + i] = R0;
		[PAGE_TABLE_BASE + childPID * 20 + i + 1] = "0110";
		i = i + 2;
	endwhile;

	//obtaining the user area page
	//print("USERApagesC");
	multipush(R5,R10,R11);
	R1 = 1;
	call MOD_2;
	multipop(R5,R10,R11);
	[PROCESS_TABLE + childPID * 16 + 11] = R0;							//USER AREA PAGE
	
	//print("processtableC");
	//initializing the process table of child process
	[PROCESS_TABLE + childPID * 16 + 0] = 0;							//TICK
	[PROCESS_TABLE + childPID * 16 + 2] = [SYSTEM_STATUS_TABLE + 1];				//PPID
	[PROCESS_TABLE + childPID * 16 + 3] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 3];	//USERID
	[PROCESS_TABLE + childPID * 16 + 4] = CREATED;							//STATUS
	[PROCESS_TABLE + childPID * 16 + 6] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 6];	//SWAP FLAG	
	[PROCESS_TABLE + childPID * 16 + 7] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 7];	//INODE INDEX
	[PROCESS_TABLE + childPID * 16 + 9] = 0;							//MODE FLAG
	[PROCESS_TABLE + childPID * 16 + 10] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 10];	//USER AREA SWAP STATUS
	[PROCESS_TABLE + childPID * 16 + 12] = 0;							//KPTR
	[PROCESS_TABLE + childPID * 16 + 13] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];	//UPTR
	
	//print("copy prepro");
	//Copy the pre-process resource table of parent to child
	i = 0;
	while(i<16) do
		[[PROCESS_TABLE + childPID * 16 + 11] * 512 + 496 + i] = [[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 + 496 + i];
		i = i + 1;
	endwhile;

	//print("cpy dmt");
	//Copy the disk map table of the parent to child (check if stack pages are made invalid as they won't be shared with the child)
	i = 0;
	while(i<10) do
		[DISK_MAP_TABLE + childPID * 10 + i] = [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + i];
		i = i + 1;
	endwhile;

	//print("pagetableC");
	//setting up page table entries for the new process
	i = 0;
	while(i<16) do
		[PAGE_TABLE_BASE + childPID * 20 + i] = [PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1] * 20 + i];
		if(i%2 == 0) then
			[MEMORY_FREE_LIST + [PAGE_TABLE_BASE + childPID * 20 + i]] = [MEMORY_FREE_LIST + [PAGE_TABLE_BASE + childPID * 20 + i]] + 1;
		endif;
		i = i + 1;
	endwhile;
	
	//print("userstack cpy");
	//copying user stack of parent to child
	alias parentStack R12;
	alias childStack R13;

	parentStack = [PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1] * 20 + 16] * 512;
	childStack = [PAGE_TABLE_BASE + childPID * 20 + 16] * 512;
	i = 0;
	while(i<512) do
		[childStack + i] = [parentStack + i];
		i = i + 1;
	endwhile;

	parentStack = [PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1] * 20 + 18] * 512;
	childStack = [PAGE_TABLE_BASE + childPID * 20 + 18] * 512;
	i = 0;
	while(i<512) do
		[childStack + i] = [parentStack + i];
		i = i + 1;
	endwhile;

	//while(i<512) do
		//[[PAGE_TABLE_BASE + childPID * 20 + 16] * 512 + i] = [[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1] * 20+ 16] * 512 + i];
		//[[PAGE_TABLE_BASE + childPID * 20 + 18] * 512 + i] = [[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1] * 20 + 18] * 512 + i];
		//i = i + 1;
	//endwhile;

	//print("setting BP");
	//store the value in the BP register on top of the kernelstack of child process.
	//[PROCESS_TABLE + childPID * 16 + 12] = 0;
	[[PROCESS_TABLE + childPID * 16 + 11] * 512] = BP;

	//-----------------------CHECK THESE TWO STATEMENTS--------------------------
	//set up return values in the user stacks of the parent and the child processe;
	//print("return val set");
	alias childSP R7;
	alias parentSP R8;
	childSP = [PROCESS_TABLE + childPID * 16 + 13] - 1;
	parentSP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] - 1;

	[([PAGE_TABLE_BASE + childPID * 20 + 2 * (childSP / 512)] * 512) + (childSP % 512)] = 0;
	[([PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1] * 20 + 2 * (parentSP / 512)] * 512) + (parentSP % 512)] = childPID;


	//[([PTBR + 2*((childSP-1)/512)] * 512) + ((childSP-1) % 512)] = childPID;

	//[([PTBR + 2*((userSP - 1)/512)] * 512) + ((userSP - 1) % 512)] = 0;
		
endif;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];
//print("exitfork");
ireturn;


