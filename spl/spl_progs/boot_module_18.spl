//print "boot";

//loading disk interrupt routine
loadi(6,19);
loadi(7,20);

//loading console interrupt routine
loadi(8,21);
loadi(9,22);

//loading int6
loadi(14,27);
loadi(15,28);

//loading int9
loadi(20,33);
loadi(21,34);

//loading process manager module (module 1)
loadi(42,55);
loadi(43,56);

//loading memory manager module (module 2)
loadi(44,57);
loadi(45,58);

//loading resource manager(module 0)
loadi(40,53);
loadi(41,54);

//loading inode table + user table
loadi(59,3);
loadi(60,4);

//loading device manager(module 4)
loadi(48,61);
loadi(49,62);

//loading scheduler(module_5)
loadi(50,63);
loadi(51,64);

//loading even number program from disk
//loadi(84,69);

// Loading the INT7 from disk to memory
loadi(16,29);
loadi(17,30);

//Loading INT10-Exit routine
loadi(22,35);
loadi(23,36);

//Loading timer interrupt routine to memory (17-->4 18--->5)
loadi(4,17);
loadi(5,18);

//Loading Library code from disk to memory 
loadi(63,13);
loadi(64,14);

//Loading exception handler 
loadi(2,15);
loadi(3,16);

//Loading INIT program
loadi(65,7);
loadi(66,8);

//initialising status field in terminal table
[TERMINAL_STATUS_TABLE + 0] = 0;

//setting up page table entries for init process

PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8]  = 65;
[PTBR+9]  = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

//setting process table for init
[PROCESS_TABLE + 16 + 1] = 1; 
[PROCESS_TABLE + 16 + 4] = CREATED;
[PROCESS_TABLE + 16 + 11] = 80; 
[PROCESS_TABLE + 16 + 12] = 0;
[PROCESS_TABLE + 16 + 13] = 8 * 512;
[PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE + 20;
[PROCESS_TABLE + 16 + 15] = 10;

[76 * 512] = [65 * 512 + 1];

alias i R5;
i = 2;
while(i<MAX_PROC_NUM) do
	[PROCESS_TABLE + i*16 + 4] = TERMINATED;
	//print i;
	i = i + 1;
endwhile;


i = 0;
while(i<MAX_MEM_PAGE) do
	if(i<83) then
		[MEMORY_FREE_LIST + i] = 1;
	else
		[MEMORY_FREE_LIST + i] = 0;
		[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
	endif;
	i = i + 1;
endwhile;

i = 0;
while(i<16) do
	[[PROCESS_TABLE + 16 + 11] * 512 + 496 + i] = -1;
	i = i+2;
endwhile;

[SYSTEM_STATUS_TABLE + 3] = 0;	
[DISK_STATUS_TABLE + 0] = 0;
	
return;


