//print "mem";

alias functionNo R1;
alias pageNo R6;
alias freePage R0;

//GET_FREE_PAGE
if(functionNo == 1) then
	//print("freepage");
	[SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] +	1;  //WAIT_MEM_COUNT

	while([SYSTEM_STATUS_TABLE + 2] == 0) do

		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 4] = WAIT_MEM;

		multipush(R0,R1,R2,R3);
		call MOD_5; 		//scheduler module
		multipush(R0,R1,R2,R3);

	endwhile;

	[SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;	//WAIT_MEM_COUNT
	[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;	//MEM_FREE_COUNT
	
	alias i R10;
	i = 76;
	while(i < 128) do
		if([MEMORY_FREE_LIST + i] == 0) then
			[MEMORY_FREE_LIST + i] = 1;
			freePage = i;
			break;
		endif;
		i = i + 1;
	endwhile;
endif;
			
//RELEASE_PAGE
if(functionNo == 2) then
	//print "releasepage";
	[MEMORY_FREE_LIST + pageNo] = [MEMORY_FREE_LIST + pageNo] - 1;
	if([MEMORY_FREE_LIST + pageNo] == 0) then
		[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;   //MEM_FREE_COUNT
	endif;

	alias i R10;
	i = 0;
	while(i<MAX_PROC_NUM) do
		if([PROCESS_TABLE + i*16 + 4] == WAIT_MEM) then
			[PROCESS_TABLE + i*16 + 4] = READY;
		endif;
		i = i + 1;
	endwhile;
endif;
	
//print("exitmem");
return;	
	
			
		
		
