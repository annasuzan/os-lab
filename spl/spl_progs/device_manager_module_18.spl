//print "devi";

alias functionNum R1;
alias currentPID R2;
alias pageNum R3;
alias diskBlock R4;


// FOR DISK LOAD
if(functionNum == 2) then
	//print("diskload");
	multipush(R1,R2,R3,R4);
	R1 = 3;		//ACQUIRE_DISK
	R2 = currentPID;
	call MOD_0;
	multipop(R1,R2,R3,R4);
	
	[DISK_STATUS_TABLE + 1] = 0;		//LOAD/STORE BIT
	[DISK_STATUS_TABLE + 2] = pageNum;	//PAGE NUMBER
	[DISK_STATUS_TABLE + 3] = diskBlock;	//DISK BLOCK
	
	load(pageNum,diskBlock);

	[PROCESS_TABLE + currentPID * 16 + 4] = WAIT_DISK;
	
	multipush(R1,R2,R3,R4);
	call MOD_5;
	multipop(R1,R2,R3,R4);
	//print("rSiD");
endif;
	
// FOR TERMINAL WRITE
if(functionNum == 3) then
	
	//CALLING ACQUIRE TERMINAL 
	multipush(R1,R2);
	R1 = 8;
	R2 = currentPID;
	call MOD_0;	//calling resource manager module
	multipop(R1,R2);
	print R3;

	//CALLING RELEASE TERMINAL
	multipush(R1,R2);
	R1 = 9;
	R2 = currentPID;
	call MOD_0;	//calling resource manager module
	multipop(R1,R2);
endif;

// FOR TERMINAL READ
if(functionNum == 4) then
	//print "enter4";
	
	//CALLING ACQUIRE TERMINAL
	multipush(R1,R2);
	R1 = 8;
	R2 = currentPID;
	call MOD_0;
	multipop(R1,R2);
	//print("iDrR");

	read;
	[PROCESS_TABLE + currentPID*16 + 4] = WAIT_TERMINAL;
	

	// INVOKING CONTEXT SWITCH MODULE
	multipush(R1,R2,R3);
	call MOD_5;
	multipop(R1,R2,R3);
	//print("iDrS");
	
	[([PTBR + 2*((R3)/512)]*512) + ((R3)%512)] = [PROCESS_TABLE + currentPID*16 +8];
	
endif;

//print("exitdevi");	
return;






