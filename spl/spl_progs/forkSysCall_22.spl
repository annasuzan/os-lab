//print("fork");

alias p R9;
p = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16;

alias pPT R3;
pPT = PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1] * 20;

[p + 9] = 8;

alias userSP R11;
userSP = SP;
[p + 13] = SP; 	

SP = [p + 11] * 512 - 1;

multipush(R3,R9,R11);
R1 = 1;		 //R1 - get pcb entry, R0 has the child pid 
call MOD_1;	 //process module
multipop(R3,R9,R11);


alias childPID R5;
childPID = R0;
//print childPID;

alias i R10;

if(childPID == -1) then
	//print("not valid PID");
	alias physicalAddrRetVal R5;
	physicalAddrRetVal = ([PTBR + 2*((userSP - 1)/512)] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal] = -1;
else
	alias c R6;
	c = PROCESS_TABLE + childPID * 16;
	alias cPT R4;
	cPT = PAGE_TABLE_BASE + childPID * 20;

	//print("valid PID");
	//print childPID;
	//set heap pages for parent if not already set
	i = 0;
	//print("heappagesP");
	while(i<2) do
		if([pPT + 4 + 2*i] == -1) then
			multipush(R3,R4,R5,R6,R9,R10,R11);
			R1 = 1;
			call MOD_2;
			multipop(R3,R4,R5,R6,R9,R10,R11);
			[pPT + 4 + 2*i] = R0;
			[pPT + 5 + 2*i] = "1110";
		endif;
		i = i + 1;
	endwhile;

	//set stack pages for child process
	//print("stackpagesC");
	i = 16;
	while(i<20) do		//stack pages 
		multipush(R3,R4,R5,R6,R9,R10,R11);
		R1 = 1;
		call MOD_2;
		multipop(R3,R4,R5,R6,R9,R10,R11);
		[cPT + i] = R0;
		[cPT + i + 1] = "0110";
		i = i + 2;
	endwhile;

	//obtaining the user area page
	//print("USERApagesC");
	multipush(R3,R4,R5,R6,R9,R10,R11);
	R1 = 1;
	call MOD_2;
	multipop(R3,R4,R5,R6,R9,R10,R11);
	[c + 11] = R0;   //USER AREA PAGE
	
	//print("processtableC");
	//initializing the process table of child process;
	[c + 0] = 0;							//TICK
	[c + 2] = [SYSTEM_STATUS_TABLE + 1];				//PPID
	[c + 3] = [p + 3];	//USERID
	[c + 4] = CREATED;							//STATUS
	[c + 6] = [p + 6];	//SWAP FLAG	
	[c + 7] = [p + 7];	//INODE INDEX
	[c + 9] = 0;							//MODE FLAG
	[c + 10] = [p + 10];	//USER AREA SWAP STATUS
	[c + 12] = 0;							//KPTR
	[c + 13] = [p + 13];	//UPTR
	
	//print("copy prepro");
	//Copy the pre-process resource table of parent to child
	i = 0;
	alias preproP R12;
	alias preproC R13;
	preproC = [c + 11] * 512 + 496;
	preproP = [p + 11] * 512 + 496;
	while(i<8) do
		[preproC + 2*i] = [preproP + 2*i];
		[preproC + 2*i + 1] = [preproP + 2*i + 1];
		if([preproP + 2*i] == 1) then
			[SEMAPHORE_TABLE + 4 * [preproP + 2*i + 1] + 1] = [SEMAPHORE_TABLE + 4 * [preproP + 2*i + 1] + 1] + 1; //CHECK
		endif;
		if([preproP + 2*i] == 0) then
			[OPEN_FILE_TABLE + 4 * [preproP + 2*i + 1] + 1] = [OPEN_FILE_TABLE + 4 * [preproP + 2*i + 1] + 1] + 1;
		endif;
		i = i + 1;
	endwhile;

	//print("cpy dmt");
	//Copy the disk map table of the parent to child (check if stack pages are made invalid as they won't be shared with the child)
	i = 0;
	while(i<10) do
		[DISK_MAP_TABLE + childPID * 10 + i] = [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + i];
		i = i + 1;
	endwhile;

	//print("pagetableC");
	//setting up page table entries for the new process
	i = 0;
	while(i<16) do
		[cPT + i] = [pPT + i];
		if(i%2 == 0) then
			[MEMORY_FREE_LIST + [cPT + i]] = [MEMORY_FREE_LIST + [cPT + i]] + 1;
		endif;
		i = i + 1;
	endwhile;
	
	//print("userstack cpy");
	//copying user stack of parent to child
	alias parentStack R12;
	alias childStack R13;

	parentStack = [pPT + 16] * 512;
	childStack = [cPT + 16] * 512;
	i = 0;
	while(i<512) do
		[childStack + i] = [parentStack + i];
		i = i + 1;
	endwhile;

	parentStack = [pPT + 18] * 512;
	childStack = [cPT + 18] * 512;
	i = 0;
	while(i<512) do
		[childStack + i] = [parentStack + i];
		i = i + 1;
	endwhile;

	//print("setting BP");
	//store the value in the BP register on top of the kernelstack of child process.
	[c + 12] = 1;
	[[c + 11] * 512] = BP;

	//-----------------------CHECK THESE TWO STATEMENTS--------------------------
	//set up return values in the user stacks of the parent and the child processe;
	//print("return val set");
	alias childSP R7;
	alias parentSP R8;
	childSP = [c + 13] - 1;
	parentSP = [p + 13] - 1;

	[([cPT + 2 * (childSP / 512)] * 512) + (childSP % 512)] = 0;
	[([pPT + 2 * (parentSP / 512)] * 512) + (parentSP % 512)] = childPID;
		
endif;

[p + 9] = 0;
SP = [p + 13];
//breakpoint;
//print("exitfork");
ireturn;


