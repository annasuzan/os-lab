//print("int12");

alias processTable R5;
processTable = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16;

alias userSP R6;
userSP = SP;

[processTable + 13] = SP;
SP = [processTable + 11] * 512 - 1;

alias returnVal R7;
returnVal = [PTBR + 2 * ((userSP - 1) / 512)] * 512 + ((userSP - 1) % 512);

alias userName R12;
userName = [[PTBR + 2 * ((userSP - 4) / 512)] * 512 + ((userSP - 4) % 512)];

alias password R13;
password = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];

[processTable + 9] = 28;
	
if([SYSTEM_STATUS_TABLE + 1] != 2) then		//If current process is not SHELL, return -1
	[returnVal] = -1;
	[processTable + 9] = 0;
	SP = [processTable + 13];
	ireturn;
endif;

backup;
R1 = 5;		//KILL_ALL
R2 = [SYSTEM_STATUS_TABLE + 1];
call MOD_1; 	//PROCESS MANAGER MODULE
restore;

[PROCESS_TABLE + 2 * 16 + 4] = TERMINATED;

// Shell should be set to run when the next user logs in
alias stackPage R8;
alias codePage R9;
stackPage = [PAGE_TABLE_BASE + 40 + 16]; //40 = 20 * 2
codePage = [PAGE_TABLE_BASE + 40 + 8];
[stackPage * 512] = [codePage * 512 + 1];

[processTable + 13] = 4096;

[PROCESS_TABLE + 1 * 16 + 4] = READY;

[SYSTEM_STATUS_TABLE + 0] = 0;

multipush(R5,R7);
call MOD_5;
multipop(R5,R7);

