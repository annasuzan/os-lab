alias usp R3;
alias pid R15;
alias pcb R2;
alias fdesc R5;
alias word R6;
//alias curr_UAP_num R7;

alias openfileIndex R8;
alias inodeIndex R9;

alias retn R10;
alias tmp R11;
alias lseek R12;
alias phy R13;
pid = [SYSTEM_STATUS_TABLE + 1];
pcb = PROCESS_TABLE + pid*16;

[pcb + 9] = 7;		//setting mode to syscall number of write i.e. 7 in PROCESS_TABLE
usp = SP;

[pcb  + 13] = SP;
SP = [pcb + 11]*512 - 1;

fdesc = [[PTBR + 2*((usp-4)/512)]*512 + (usp-4)%512];
word = [[PTBR + 2*((usp-3)/512)]*512 + (usp-3)%512];
retn = [PTBR + 2*((usp-1)/512)]*512 + ((usp-1)%512);


if(fdesc != -1) then		//not -1 so NOT read from terminal so maybe from file
    //print("1");
	if(fdesc < 0  ||  fdesc > 7) then	//if file_desc is invalid for a file
		[retn] = -1;
		[pcb + 9] = 0;		//setting MODE FLAG to 0 before return to user mode
		SP = [pcb + 13];		//restoring SP to USER STACK
        //print("fdescinv");
		ireturn;
	else
        alias rest R7;
        rest = [pcb + 11]*512 + RESOURCE_TABLE_OFFSET;
		if([rest+fdesc*2] != FILE) then	//if given desc does not have an open file
			[retn] = -1;

			[pcb + 9] = 0;		//setting MODE FLAG to 0 before return to user mode
			SP = [pcb + 13];		//restoring SP to USER STACK
			ireturn;
		else		//if the given desc indiactes an open file
			openfileIndex = [rest + fdesc*2 + 1];
			inodeIndex = [OPEN_FILE_TABLE + 4*openfileIndex + 0];
            //print("a");
			multipush (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12,R13,R15);
                //print("eh");
				R1 = ACQUIRE_INODE;
				R2 = inodeIndex;
                R3 = pid;
				call RESOURCE_MANAGER;
                //print("inre");
			multipop (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12,R13,R15);
            //print("b");
			if(R0 == -1) then
				[retn] = -1;
				[pcb + 9] = 0;		    //setting MODE FLAG to 0 before return to user mode
				SP = [pcb + 13];		//restoring SP to USER STACK
                //print("xx");
				ireturn;
			else
				lseek = OPEN_FILE_TABLE + 4*openfileIndex + 2;
                phy = [PTBR + 2*(word/512)]*512 + (word)%512;
				if(inodeIndex == INODE_ROOT) then	//if file to be read if ROOTfile
					if([lseek] >= 480) then			//if lseek has already reached end of file

						backup;
						R1 = RELEASE_INODE;
						R2 = inodeIndex;		//RELEASE INODE
                        R3 = pid;
						call RESOURCE_MANAGER;
						restore;
						[retn] = -2;		//ret -2 as lseek already at end of file
						[pcb + 9] = 0;		//setting MODE FLAG to 0 before return to user mode
						SP = [pcb + 13];		//restoring SP to USER STACK
						ireturn;

					else		//if lseek still not at end of ROOTfile
						[phy] = [ROOT_FILE + [lseek]];
						[lseek] = [lseek] + 1;
					endif;
                //print("c");
				else
					if([lseek] >= [INODE_TABLE + 16*inodeIndex + 2]) then	//if lseek already at end of file (lseek >= filesize)
						backup;
						R1 = RELEASE_INODE;
						R2 = inodeIndex;		//RELEASE INODE
						R3 = pid;
						call RESOURCE_MANAGER;
						restore;

						[retn] = -2;		//ret -2 as lseek already at end of file

						[pcb + 9] = 0;		//setting MODE FLAG to 0 before return to user mode
						SP = [pcb + 13];		//restoring SP to USER STACK
						ireturn;

					else
                        //print("d");
						backup;
							R1 = BUFFERED_READ; 			                                    //calling BUFFERED_REDA of FILE_MANAGER
							R2 = [INODE_TABLE+ 16*inodeIndex + 8 + ([lseek]/512)];	            //disk BLOCK num
							R3 = [lseek]%512;		//offset		
							R4 = phy;
							call FILE_MANAGER;
						restore;

						[lseek] = [lseek] + 1;	//increment lseek

					endif;

				endif;

					                backup;
                                        R1 = RELEASE_INODE;
                                        R2 = inodeIndex;          //RELEASE INODE
                                        R3 = pid;
                                        call RESOURCE_MANAGER;
                                    restore;

                    [retn] = 0;                //ret 0 for success
					[pcb + 9] = 0;           //setting MODE FLAG to 0 before return to user mode
                    //print("c");
                    SP = [pcb + 13];         //restoring SP to USER STACK
                    ireturn;

			endif;

		endif;

	endif;

else			//filr_desc -1 so read from terminal

	//print("h");
	backup;
	R1 = 4;			//calling TERMINAL READ
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = word;
	call DEVICE_MANAGER;		//calling DEVICE_MANAGER_MODULE
	
	restore;


	[retn] = 0;	//settin return value to 0 at correct place in user stack

	[pcb + 9] = 0;		//setting MODE FLAG to 0 before return to user mode
	SP = [pcb + 13];		//restoring SP to USER STACK
	
    ireturn;
endif;
